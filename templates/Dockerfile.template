########################################################
# Builder stage: install uv and Python dependencies
########################################################
FROM python:3.12-slim-bookworm AS builder

ARG MODULE_NAME
ARG PORT=8080
ENV MODULE_NAME=${MODULE_NAME}
ENV PORT=${PORT}

# 1. Install curl and build tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential curl && \
    rm -rf /var/lib/apt/lists/*

# 2. Copy uv CLI
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

WORKDIR /app

# 3. Copy requirements.txt only (no pyproject.toml or uv.lock)
COPY requirements.txt .

# 4. Create a virtualenv and install dependencies into it
RUN uv venv /app/.venv && \
    uv pip install --python=/app/.venv/bin/python -r requirements.txt

# 5. Copy application source
COPY . /app

########################################################
# Runtime stage: minimal Python + curl + clean .venv
########################################################
FROM python:3.12-slim-bookworm AS runtime

ARG MODULE_NAME
ARG PORT=8080
ENV MODULE_NAME=${MODULE_NAME}
ENV PORT=${PORT}

WORKDIR /app

# 1. Install curl for healthcheck support
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl && rm -rf /var/lib/apt/lists/*

# 2. Copy .venv from builder
COPY --from=builder /app/.venv /app/.venv

# 3. Activate .venv
ENV VIRTUAL_ENV=/app/.venv
ENV PATH="/app/.venv/bin:$PATH"

# 4. Copy app source
COPY . /app

EXPOSE ${PORT}

HEALTHCHECK --interval=30s --timeout=5s --start-period=15s --retries=3 \
  CMD curl --fail http://0.0.0.0:${PORT}/health

# 5. Entrypoint using dynamic module name
CMD ["uvicorn", "--host", "0.0.0.0", "--port", "${PORT}", "${MODULE_NAME}.server:app"]
